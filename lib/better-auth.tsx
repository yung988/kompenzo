'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from './supabase';
import { User } from './types';

// Interface pro auth context
export interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  error: string | null;
  login: (email: string, password: string) => Promise<User | null>;
  register: (email: string, password: string, userData: { 
    name: string; 
    phone?: string; 
    address?: string; 
    bankAccount?: string 
  }) => Promise<User | null>;
  logout: () => Promise<boolean>;
  updateProfile: (userData: { 
    name?: string; 
    phone?: string; 
    address?: string; 
    bankAccount?: string 
  }) => Promise<User | null>;
  clearError: () => void;
}

// Create context with a default empty value
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Convert Supabase user to our app's user format
export const mapSupabaseUser = (supabaseUser: any): User | null => {
  if (!supabaseUser) return null;
  
  return {
    id: supabaseUser.id,
    email: supabaseUser.email || '',
    name: supabaseUser.user_metadata?.name || '',
    phone: supabaseUser.user_metadata?.phone,
    address: supabaseUser.user_metadata?.address,
    bankAccount: supabaseUser.user_metadata?.bankAccount
  };
};

// Provider component
export function BetterAuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // Clear error
  const clearError = () => setError(null);

  // Check for existing session on mount
  useEffect(() => {
    const checkSession = async () => {
      try {
        setIsLoading(true);
        clearError();
        
        console.log('üîê Kontrola existuj√≠c√≠ session...');
        
        // Get the current user
        const { data, error } = await supabase.auth.getUser();
        
        if (error) {
          console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ session:', error.message);
          throw error;
        }
        
        if (data?.user) {
          console.log('‚úÖ U≈æivatel naƒçten:', data.user.id);
          setUser(mapSupabaseUser(data.user));
        } else {
          console.log('‚ö†Ô∏è ≈Ω√°dn√Ω p≈ôihl√°≈°en√Ω u≈æivatel');
          setUser(null);
        }
      } catch (err) {
        console.error('‚ùå Neoƒçek√°van√° chyba p≈ôi kontrole session:', err);
        if (err instanceof Error) {
          setError(err.message);
        } else {
          setError('Nepoda≈ôilo se naƒç√≠st u≈æivatelsk√° data');
        }
        setUser(null);
      } finally {
        setIsLoading(false);
      }
    };

    // Listen for auth state changes
    const { data: authListener } = supabase.auth.onAuthStateChange((event, session) => {
      console.log('üîî Auth event:', event);
      
      if (event === 'SIGNED_IN' && session?.user) {
        console.log('‚úÖ U≈æivatel p≈ôihl√°≈°en:', session.user.id);
        setUser(mapSupabaseUser(session.user));
      } else if (event === 'SIGNED_OUT') {
        console.log('üëã U≈æivatel odhl√°≈°en');
        setUser(null);
      }
    });

    checkSession();

    // Cleanup
    return () => {
      authListener?.subscription.unsubscribe();
    };
  }, []);

  // Login
  const login = async (email: string, password: string): Promise<User | null> => {
    try {
      setIsLoading(true);
      clearError();
      
      console.log('üîê Pokus o p≈ôihl√°≈°en√≠:', email);
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });
      
      if (error) {
        console.error('‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠:', error.message);
        setError(`P≈ôihl√°≈°en√≠ selhalo: ${error.message}`);
        return null;
      }
      
      if (!data.user) {
        console.error('‚ùå P≈ôihl√°≈°en√≠ vr√°tilo pr√°zdn√° data');
        setError('P≈ôihl√°≈°en√≠ selhalo: Neplatn√© p≈ôihla≈°ovac√≠ √∫daje');
        return null;
      }
      
      const mappedUser = mapSupabaseUser(data.user);
      console.log('‚úÖ P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©:', mappedUser?.id);
      setUser(mappedUser);
      
      return mappedUser;
    } catch (err) {
      console.error('‚ùå Neoƒçek√°van√° chyba p≈ôi p≈ôihl√°≈°en√≠:', err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('Do≈°lo k chybƒõ p≈ôi p≈ôihla≈°ov√°n√≠');
      }
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  // Register
  const register = async (
    email: string, 
    password: string, 
    userData: { 
      name: string; 
      phone?: string; 
      address?: string; 
      bankAccount?: string 
    }
  ): Promise<User | null> => {
    try {
      setIsLoading(true);
      clearError();
      
      console.log('üìù Pokus o registraci:', email);
      
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: userData,
          emailRedirectTo: `${typeof window !== 'undefined' ? window.location.origin : ''}/login`
        }
      });
      
      if (error) {
        console.error('‚ùå Chyba p≈ôi registraci:', error.message);
        setError(`Registrace selhala: ${error.message}`);
        return null;
      }
      
      if (!data.user) {
        console.error('‚ùå Registrace vr√°tila pr√°zdn√° data');
        setError('Registrace selhala: Nezn√°m√° chyba');
        return null;
      }
      
      // Check if email confirmation is required
      if (!data.session) {
        console.log('üìß Je vy≈æadov√°no potvrzen√≠ emailu');
        setError('Registrace √∫spƒõ≈°n√°! Pros√≠m zkontrolujte sv≈Øj email pro potvrzen√≠.');
        return null;
      }
      
      const mappedUser = mapSupabaseUser(data.user);
      console.log('‚úÖ Registrace √∫spƒõ≈°n√°:', mappedUser?.id);
      setUser(mappedUser);
      
      return mappedUser;
    } catch (err) {
      console.error('‚ùå Neoƒçek√°van√° chyba p≈ôi registraci:', err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('Do≈°lo k chybƒõ p≈ôi registraci');
      }
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  // Logout
  const logout = async (): Promise<boolean> => {
    try {
      setIsLoading(true);
      clearError();
      
      console.log('üëã Pokus o odhl√°≈°en√≠');
      
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('‚ùå Chyba p≈ôi odhl√°≈°en√≠:', error.message);
        setError(`Odhl√°≈°en√≠ selhalo: ${error.message}`);
        return false;
      }
      
      console.log('‚úÖ Odhl√°≈°en√≠ √∫spƒõ≈°n√©');
      setUser(null);
      
      return true;
    } catch (err) {
      console.error('‚ùå Neoƒçek√°van√° chyba p≈ôi odhl√°≈°en√≠:', err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('Do≈°lo k chybƒõ p≈ôi odhla≈°ov√°n√≠');
      }
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // Update profile
  const updateProfile = async (
    userData: { 
      name?: string; 
      phone?: string; 
      address?: string; 
      bankAccount?: string 
    }
  ): Promise<User | null> => {
    try {
      setIsLoading(true);
      clearError();
      
      console.log('‚úèÔ∏è Pokus o aktualizaci profilu');
      
      const { data, error } = await supabase.auth.updateUser({
        data: userData
      });
      
      if (error) {
        console.error('‚ùå Chyba p≈ôi aktualizaci profilu:', error.message);
        setError(`Aktualizace profilu selhala: ${error.message}`);
        return null;
      }
      
      if (!data.user) {
        console.error('‚ùå Aktualizace vr√°tila pr√°zdn√° data');
        setError('Aktualizace profilu selhala: Nezn√°m√° chyba');
        return null;
      }
      
      const mappedUser = mapSupabaseUser(data.user);
      console.log('‚úÖ Aktualizace profilu √∫spƒõ≈°n√°');
      setUser(mappedUser);
      
      return mappedUser;
    } catch (err) {
      console.error('‚ùå Neoƒçek√°van√° chyba p≈ôi aktualizaci profilu:', err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('Do≈°lo k chybƒõ p≈ôi aktualizaci profilu');
      }
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  // Context value
  const value: AuthContextType = {
    user,
    isLoading,
    error,
    login,
    register,
    logout,
    updateProfile,
    clearError
  };

  // Provide the auth context to children
  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

// Custom hook to use auth
export function useBetterAuth(): AuthContextType {
  const context = useContext(AuthContext);
  
  if (!context) {
    throw new Error('useBetterAuth mus√≠ b√Ωt pou≈æit uvnit≈ô BetterAuthProvider');
  }
  
  return context;
} 